<?phpclass File_Upload {    private $types_allowed = array("jpg", "gif", "png", "jpeg", "pdf", "mp3", "flv", "mov", "mpg", "mpeg", "wmv", "swf", "zip");    private $max_file_size = 625000; // 5mb    private $target_dir = "./";    public function __construct($dir=false, $bytesize=false)    {        if(is_dir($dir)){            $this->target_dir = $dir;        }                if(is_numeric($bytesize)){            $this->max_file_size = $bytesize;        }        return $this;    }// end construct ---------------------------------------------------------------------------------------------- end construct        public function setTypes($t_array)    {        $isSet = false;                if (is_array($t_array))        {            $this->types_allowed = $t_array;            $isSet = true;        }        return ($isSet)? $this : false;    }            public function addAllowedType($newType)    {        $isAdded = false;                if(is_string($newType))        {            $this->types_allowed.push($newType);            $isAdded = true;        }        return ($isAdded)? $this : false;            }        public function removeTypes($t_array)    {        $isFiltered = false;                if(is_array($t_array)){                        $this->types_allowed = array_diff($this->types_allowed, $t_array);            $isFiltered = true;        }                return  ($isFiltered)? $this : false;            }// end removeTypes -------------------------------------------------------------------------------------------- end removeTypes        public function setUploadDir($path_string)    {        $isUploadDirSet = false;                if (is_dir($path_string))        {            $this->target_dir = $path_string;            $isUploadDirSet = true;        }        return ($isUploadDirSet)? $this : false;    }// end setUploadPath ------------------------------------------------------------------------------------------ end setUploadPath        public function setMaxSize($num)    {        $isSizeSet = false;                if (is_int($num))        {            $this->max_file_size = $num;            $isSizeSet = true;        }        return ($isSizeSet)? $this : false;    }// end setMaxSize --------------------------------------------------------------------------------------------- end setMaxSize        public function upload($the_file)    {             if (is_uploaded_file($the_file['tmp_name']) && $the_file['size'] <= $this->max_file_size)        {            // get file's extension            $file_extension = end(explode(".", $the_file['name']));            // check if extension is allowed, and if so, move the file            if (in_array($file_extension, $this->types_allowed))            {                // assign final target path in which to move file                $final_path = $this->target_dir . basename($the_file['name']);                // move file and return boolean on success                return move_uploaded_file($the_file['tmp_name'], $final_path);            }            else            {                // if file's extension is not allowed, tell them'                die("Error:: FileUpload upload :: The extension '$file_extension' is not allowed for uploading.");                            }        }        else        {            // may be better to split the error messages for less abiguity            die("Error :: FileUpload upload :: argument is either a non-valid file or exceeds the maximum allowable size");        }    }// end upload ------------------------------------------------------------------------------------------------- end setUploadPath    }/* end class*/