<?phpclass AccountMail{    /***************************************************    VARIABLES *****************************************/        private $emailhost              = string;    private $emailacct              = string;    private $emailpw                = string;        private $emailResult            = resource;        private $gmailhost              = "{imap.gmail.com:993/imap/ssl}INBOX";    private $gmailacct              = string;    private $gmailpw                = string;        private $yahoohost              = string;        private $display_num            = 10;    private $siteBox                = object;    private $gmailBox               = object;    private $yahooBox               = object;        /****************************************************    METHODS ********************************************/        public function __construct($user_acct, $pass)    {                if((string)trim($user_acct) && (string)trim($pass))        {            $this->emailResult = imap_open("{mail.apathymedia.com:143/notls}INBOX", $user_acct, $pass);        }            }// end construct ---------------------------------------------------------------------------------------------- end construct            public function setDisplayNum($new_num)    {                if((int)$new_num > 0)        {                        $this->display_num = $new_num;        }                    }// end setDisplayNum ------------------------------------------------------------------------------------------ end setDisplayNum            public function check_site_email()    {        if($this->emailResult)        {                        $this->siteBox =    imap_status($this->emailResult, '{mail.apathymedia.com}INBOX', SA_ALL);                        return $this->siteBox;        }        else         {                        die("ERROR :: Invalid result passed");                    }            }// end check_site_email --------------------------------------------------------------------------------------- end check_site_email                public function check_gmail($user_acct, $pass)    {        if((string)trim($user_acct) && (string)trim($pass))        {            $gbox               = imap_open($this->gmailhost, $user_acct, $pass);                        $this->gmailbox     = imap_status($gbox, $this->gmailhost, SA_ALL);                        return $this->gmailBox;                    }        else        {            die("ERROR :: Invalid arguments");                    }                    }// end check_gmail -------------------------------------------------------------------------------------------- end check gmail                public function check_yahoo()    {                    }// end check_yahoo -------------------------------------------------------------------------------------------- end check_yahoo        public function listMail($start_num=0, $list_num = 10)    {                $tmp_array = array();                   for($i=1; $i<=$list_num; $i++)        {            $temp_msg = imap_fetchstructure($this->emailResult, $i);               //print_r($temp_msg);            array_push($tmp_array, imap_headerinfo($this->emailResult, $i));        }                return array_reverse($tmp_array);                    }// end listMail ----------------------------------------------------------------------------------------------- end listMail            public function getMail($num){            $structure = imap_bodystruct($this->emailResult, $num, "1");            //print_r($structure);            switch($structure->encoding)            {                case 0://7bit                    /****************************************************                    find better way to parse email encodes - this is a temp                     fix for $structure->parts[0]-encoding coming up as '0'                    ie- utf7 *********************************************/                    return imap_fetchbody($this->emailResult, $num, "1");                    break;                                                        case 1://8bit                    return imap_qprint(imap_8bit(imap_fetchbody($this->emailResult, $num, "1")));                    break;                                    case 2://binary                    return imap_binary(imap_fetchbody($this->emailResult, $num, "1"));                    break;                                    case 3://base 64                    return imap_base64(imap_fetchbody($this->emailResult, $num, "1"));                    break;                                    case 4://Quoted Printable                    return imap_8bit(imap_qprint(imap_fetchbody($this->emailResult, $num, "1")));                    break;                                    case 5:// other                    break;                                    default:                    return imap_fetchbody($this->emailResult, $num, "1");                    break;            }             }// end getmail ------------------------------------------------------------------------------------------------ end getMail            }/* End Class*/