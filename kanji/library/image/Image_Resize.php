<?php/*  Upload should be it's own class  and extended by UploadImage class  also check for greater abstraction */class Image_Resize {    //default directory for icons    private $icon_path = "";    // get data from original upload    private $img_data = array();    // default width/height for created thumbnails    private $thumb_width = 75;    private $thumb_height = 75;    private $max_width = 1000;    private $max_height = 1000;    public function __constructor()    {            }// end Constructor ---------------------------------------------------------------------------------------------------- end Constructor    public function setThumbnailPath($path_str)    {        $this->icon_path = $path_str;        return $this;    }// end setThumbnailPath ---------------------------------------------------------------------------------------------------- end setThumbnailPath    public function setThumbHeight($int_h)    {        if ((integer) $int_h)        {            $this->thumb_height = $int_h;        }        else        {            die("ERROR :: Invalid input for setting Thumbnail Height");        }        return $this;    }// end setThumbHeight ------------------------------------------------------------------------------------------------- end setThumbHeight    public function setThumbWidth($int_w)    {        if ((integer) $int_w)        {            $this->thumb_width = $int_w;        }        else        {            die("ERROR :: Invlaid input for setting Thumbnail Width");        }        return $this;    }// end setThumbWidth -------------------------------------------------------------------------------------------------- end setThumbWidth    // method not yet tested 10/24/09 *******************    public function renameImage($target_file, $name_str)    {        if ((string) trim($name_str) && file_exists($target_file))        {            $dir_pos = strrpos($target_file, "/");            if ($dir_pos)            {                $file_path = substr($target_file, 0, $dir_pos);                $file_extension = substr($target_file, -4);                $new_file_name = $file_path . $name_str . $file_extension;                rename($target_file, $new_file_name);            }            else            {                rename($target_file, $name_str);            }        }        else if (!(string) $name_str)        {            die("ERROR :: New Image Name is invalid type");        }        else if (!file_exists)        {            die("ERROR :: Cannont find target file");        }    }// end renameImage ---------------------------------------------------------------------------------------------------- end renameImage    public function upload($img_file, $new_name)    {        $new_name = str_replace(" ", "_", $new_name);        // gather image data before upload         // img_file intended to have $_FILES passed to it        $this->img_data = getimagesize($img_file['tmp_name']);        // use gathered image data to determine file type extension        switch ($this->img_data[2])        {            case 1:                $img_data_extension = ".gif";                break;            case 2:                $img_data_extension = ".jpg";                break;            case 3:                $img_data_extension = ".png";                break;            default:                die("Image is of invalid type");        }        // assign name for image, or use it's default name        // taken from the name property        if ($new_name)        {            // to keep same extention, replace '.jpg'            // with $img_data_extension            $img_name = $new_name . ".jpg";        }        else        {            $img_name = $img_file['name'];        }        // set full upload path with (possibly)        // new image name        $file_path = $this->upload_path . $img_name;        // final check and upload if successful        // if check fails, spit error message        if (is_uploaded_file($img_file['tmp_name']) && $this->img_data)        {            move_uploaded_file($img_file['tmp_name'], $file_path);            // invoke class's makeThumbnail method            $this->makeThumbnail($file_path, $new_name, $this->icon_path);            return true;        }        else        {            die("Fail due to invalid upload technique or file");        }    }// end upload --------------------------------------------------------------------------------------------------------- end upload    public function makeThumbnail($target_image, $im_nm_str, $up_path_str)    {        $im_nm_str = str_replace(" ", "_", $im_nm_str);        /* determine necessary ratio to reduce width & height of image to match target size */        $temp_w_ratio = ($this->thumb_width / $this->img_data[0]);        $temp_h_ratio = ($this->thumb_height / $this->img_data[1]);        $altered_width = "";        $altered_height = "";        if ($temp_w_ratio < $temp_h_ratio)        {            $altered_width = round($this->img_data[0] * $temp_w_ratio);            $altered_height = round($this->img_data[1] * $temp_w_ratio);        }        else if ($temp_w_ratio > $temp_h_ratio)        {            $altered_height = round($this->img_data[1] * $temp_h_ratio);            $altered_width = round($this->img_data[0] * $temp_h_ratio);        }        $new_image = imagecreatetruecolor($altered_width, $altered_height);        switch ($this->img_data[2])        {            case 1:                $tmp_image = imagecreatefromgif($target_image);                break;            case 2:                $tmp_image = imagecreatefromjpeg($target_image);                break;            case 3:                $tmp_image = imagecreatefrompng($target_image);                break;        }        imagecopyresampled($new_image, $tmp_image, 0, 0, 0, 0, $altered_width, $altered_height, $this->img_data[0], $this->img_data[1]);        // ensure target directory exists,        // if not, create it				           if (isset($up_path_str))        {            if (!file_exists($up_path_str))            {                mkdir($up_path_str);            }        }        /* set full path for newly created image */        $file_path = $up_path_str . $im_nm_str;        imagejpeg($new_image, $file_path . ".jpg", 100);    }// end makeThumb ------------------------------------------------------------------------------------------------------ end makeThumbnail    public function crop($img_src, $sx, $sy, $ex, $ey, $doMakeThumbnail = false)    {        $wd = $ex - $sx;        $ht = $ey - $sy;        $orig_image_properties = getimagesize($img_src);        switch ($orig_image_properties[2])        {            case 1:                $tmp_image = imagecreatefromgif($img_src);                $new_image = imagecreatetruecolor($wd, $ht);                $tcolor = imagecolorallocate($new_image, 100, 100, 100);                imagefilledrectangle($new_image, 0, 0, $wd, $ht, $tcolor);                imagecolortransparent($new_image, $tcolor);                break;            case 2:                $tmp_image = imagecreatefromjpeg($img_src);                $new_image = imagecreatetruecolor($wd, $ht);                break;            case 3:                $tmp_image = imagecreatefrompng($img_src);                imagealphablending($tmp_image, false);                imagesavealpha($tmp_image, true);                $new_image = imagecreatetruecolor($wd, $ht);                $tcolor = imagecolorallocate($new_image, 100, 100, 100);                imagefilledrectangle($new_image, 0, 0, $wd, $ht, $tcolor);                imagecolortransparent($new_image, $tcolor);                break;        }        imagecopyresampled($new_image, $tmp_image, 0, 0, $sx, $sy, $wd, $ht, $wd, $ht);        switch ($orig_image_properties[2])        {            case 1:                $file_path = $img_src;                $tmp_image = imagegif($new_image, $file_path);                break;            case 2:                $file_path = $img_src;                $tmp_image = imagejpeg($new_image, $file_path, 100);                break;            case 3:                $file_path = $img_src;                $tmp_image = imagepng($new_image, $file_path, 0);                break;        }                $this->img_data = getimagesize($img_src);        if (is_bool($doMakeThumbnail))        {            $this->makeThumbnail($file_path, substr(strrchr($img_src, "/"), 1, -4), $this->icon_path);        }    }// end crop ----------------------------------------------------------------------------------------------------------- end crop}// end class/* end file*/